// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace winery_backend.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240522232807_initialcreate")]
    partial class initialcreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Carts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 2
                        });
                });

            modelBuilder.Entity("CartProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartProducts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CartId = 1,
                            ProductId = 1,
                            Quantity = 5
                        },
                        new
                        {
                            Id = 2,
                            CartId = 1,
                            ProductId = 2,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 3,
                            CartId = 2,
                            ProductId = 2,
                            Quantity = 2
                        });
                });

            modelBuilder.Entity("City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Cities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Belgrade",
                            Zip = "11000"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Novi Sad",
                            Zip = "21000"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Niš",
                            Zip = "18000"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Kragujevac",
                            Zip = "34000"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Subotica",
                            Zip = "24000"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Zrenjanin",
                            Zip = "23000"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Pančevo",
                            Zip = "26000"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Čačak",
                            Zip = "32000"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Kraljevo",
                            Zip = "36000"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Smederevo",
                            Zip = "11300"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Leskovac",
                            Zip = "16000"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Valjevo",
                            Zip = "14000"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Užice",
                            Zip = "31000"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Šabac",
                            Zip = "15000"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Novi Pazar",
                            Zip = "36300"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Negotin",
                            Zip = "19300"
                        });
                });

            modelBuilder.Entity("Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Door")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Firstname")
                        .HasColumnType("longtext");

                    b.Property<string>("Floor")
                        .HasColumnType("longtext");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Lastname")
                        .HasColumnType("longtext");

                    b.Property<string>("Number")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<int?>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Customers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1990, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityId = 1,
                            Email = "john.doe@example.com",
                            Firstname = "John",
                            Gender = 1,
                            Lastname = "Doe",
                            Number = "101",
                            Password = "hashedpassword",
                            PhoneNumber = "1234567890",
                            Role = 9,
                            Street = "123 Main St",
                            Username = "johndoe"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(1992, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityId = 2,
                            Door = "3",
                            Email = "jane.doe@example.com",
                            Firstname = "Jane",
                            Floor = "2",
                            Gender = 0,
                            Lastname = "Doe",
                            Number = "202",
                            Password = "hashedpassword",
                            PhoneNumber = "9876543210",
                            Role = 9,
                            Street = "456 Elm St",
                            Username = "janedoe"
                        });
                });

            modelBuilder.Entity("Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Percentage")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("Discounts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Percentage = 20.0
                        });
                });

            modelBuilder.Entity("Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Firstname")
                        .HasColumnType("longtext");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Lastname")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("ProfilePhoto")
                        .HasColumnType("longtext");

                    b.Property<int?>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Employees", (string)null);

                    b.UseTptMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1990, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "pera.peric@example.com",
                            Firstname = "Pera",
                            Gender = 1,
                            Lastname = "Peric",
                            Password = "hashedpassword",
                            PhoneNumber = "1234567890",
                            ProfilePhoto = "somepath",
                            Role = 7,
                            Username = "peraperic"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(1992, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "imenko@example.com",
                            Firstname = "Imenko",
                            Gender = 1,
                            Lastname = "Prezimenic",
                            Password = "hashedpassword",
                            PhoneNumber = "9876543210",
                            ProfilePhoto = "somepath",
                            Role = 0,
                            Username = "imenko"
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(1982, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@admin.com",
                            Firstname = "Admin",
                            Gender = 1,
                            Lastname = "Adminovic",
                            Password = "$2a$10$dVNZNTm8Ts9fGjM3M8QuE.LF0ZutYn1utYoeSdfZZXbB0ec9MjBUS",
                            PhoneNumber = "061111111",
                            ProfilePhoto = "somepath",
                            Role = 0,
                            Username = "admin123"
                        },
                        new
                        {
                            Id = 11,
                            BirthDate = new DateTime(1990, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "warehouseman_email_1@gmail.com",
                            Firstname = "warehouseman_first_name_1",
                            Gender = 1,
                            Lastname = "warehouseman_last_name_1",
                            Password = "a",
                            PhoneNumber = "061123123",
                            ProfilePhoto = "photo_warehouseman_1.png",
                            Role = 4,
                            Username = "warehouseman_1"
                        },
                        new
                        {
                            Id = 12,
                            BirthDate = new DateTime(1991, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "warehouseman_email_2@gmail.com",
                            Firstname = "warehouseman_first_name_2",
                            Gender = 1,
                            Lastname = "warehouseman_last_name_2",
                            Password = "a",
                            PhoneNumber = "062345345",
                            ProfilePhoto = "photo_warehouseman_2.png",
                            Role = 4,
                            Username = "warehouseman_2"
                        },
                        new
                        {
                            Id = 13,
                            BirthDate = new DateTime(1992, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "warehouseman_email_3@gmail.com",
                            Firstname = "warehouseman_first_name_3",
                            Gender = 0,
                            Lastname = "warehouseman_last_name_3",
                            Password = "a",
                            PhoneNumber = "063456789",
                            ProfilePhoto = "photo_warehouseman_3.png",
                            Role = 4,
                            Username = "warehouseman_3"
                        },
                        new
                        {
                            Id = 14,
                            BirthDate = new DateTime(1993, 8, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "warehouseman_email_4@gmail.com",
                            Firstname = "warehouseman_first_name_4",
                            Gender = 0,
                            Lastname = "warehouseman_last_name_4",
                            Password = "a",
                            PhoneNumber = "064123123",
                            ProfilePhoto = "photo_warehouseman_4.png",
                            Role = 4,
                            Username = "warehouseman_4"
                        },
                        new
                        {
                            Id = 15,
                            BirthDate = new DateTime(1994, 9, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "warehouseman_email_5@gmail.com",
                            Firstname = "warehouseman_first_name_5",
                            Gender = 1,
                            Lastname = "warehouseman_last_name_5",
                            Password = "a",
                            PhoneNumber = "066234567",
                            ProfilePhoto = "photo_warehouseman_5.png",
                            Role = 4,
                            Username = "warehouseman_5"
                        },
                        new
                        {
                            Id = 16,
                            BirthDate = new DateTime(1995, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "warehouseman_email_6@gmail.com",
                            Firstname = "warehouseman_first_name_6",
                            Gender = 1,
                            Lastname = "warehouseman_last_name_6",
                            Password = "a",
                            PhoneNumber = "063456789",
                            ProfilePhoto = "photo_warehouseman_6.png",
                            Role = 4,
                            Username = "warehouseman_6"
                        },
                        new
                        {
                            Id = 17,
                            BirthDate = new DateTime(1996, 11, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "warehouseman_email_7@gmail.com",
                            Firstname = "warehouseman_first_name_7",
                            Gender = 0,
                            Lastname = "warehouseman_last_name_7",
                            Password = "a",
                            PhoneNumber = "061456789",
                            ProfilePhoto = "photo_warehouseman_7.png",
                            Role = 4,
                            Username = "warehouseman_7"
                        },
                        new
                        {
                            Id = 18,
                            BirthDate = new DateTime(1997, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "warehouseman_email_8@gmail.com",
                            Firstname = "warehouseman_first_name_8",
                            Gender = 0,
                            Lastname = "warehouseman_last_name_8",
                            Password = "a",
                            PhoneNumber = "069123123",
                            ProfilePhoto = "photo_warehouseman_8.png",
                            Role = 4,
                            Username = "warehouseman_8"
                        },
                        new
                        {
                            Id = 21,
                            BirthDate = new DateTime(1998, 1, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "van_driver_email_1@gmail.com",
                            Firstname = "van_driver_first_name_1",
                            Gender = 1,
                            Lastname = "van_driver_last_name_1",
                            Password = "a",
                            PhoneNumber = "062111111",
                            ProfilePhoto = "photo_van_driver_1.png",
                            Role = 7,
                            Username = "van_driver_1"
                        },
                        new
                        {
                            Id = 22,
                            BirthDate = new DateTime(1999, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "van_driver_email_2@gmail.com",
                            Firstname = "van_driver_first_name_2",
                            Gender = 1,
                            Lastname = "van_driver_last_name_2",
                            Password = "a",
                            PhoneNumber = "062222222",
                            ProfilePhoto = "photo_van_driver_2.png",
                            Role = 7,
                            Username = "van_driver_2"
                        },
                        new
                        {
                            Id = 23,
                            BirthDate = new DateTime(2000, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "van_driver_email_3@gmail.com",
                            Firstname = "van_driver_first_name_3",
                            Gender = 0,
                            Lastname = "van_driver_last_name_3",
                            Password = "a",
                            PhoneNumber = "062333333",
                            ProfilePhoto = "photo_van_driver_3.png",
                            Role = 7,
                            Username = "van_driver_3"
                        },
                        new
                        {
                            Id = 24,
                            BirthDate = new DateTime(2001, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "van_driver_email_4@gmail.com",
                            Firstname = "van_driver_first_name_4",
                            Gender = 0,
                            Lastname = "van_driver_last_name_4",
                            Password = "a",
                            PhoneNumber = "062444444",
                            ProfilePhoto = "photo_van_driver_4.png",
                            Role = 7,
                            Username = "van_driver_4"
                        });
                });

            modelBuilder.Entity("Pricing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int");

                    b.Property<double?>("Price")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.ToTable("Pricing", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DiscountId = 1,
                            Price = 99.989999999999995
                        },
                        new
                        {
                            Id = 2,
                            Price = 235.99000000000001
                        },
                        new
                        {
                            Id = 3,
                            Price = 132.99000000000001
                        },
                        new
                        {
                            Id = 4,
                            Price = 72.0
                        });
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AlcoholPercentage")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<decimal>("PackagingSize")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Photo")
                        .HasColumnType("longtext");

                    b.Property<int?>("PricingId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PricingId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AlcoholPercentage = 5m,
                            Description = "Indulge in the rich, velvety depths of Scarlet Elixir Red Wine. Crafted from the finest handpicked grapes, this robust red wine boasts a symphony of flavors, including notes of ripe berries, dark chocolate, and a hint of spice. Perfect for cozy evenings by the fireplace or elegant dinner parties, this wine tantalizes the palate with its smooth texture and lingering finish.",
                            IsApproved = true,
                            Name = "Scarlet Elixir Red Wine",
                            PackagingSize = 1.5m,
                            Photo = "wine1.png",
                            PricingId = 1,
                            ProductCategoryId = 1,
                            Quantity = 35,
                            SectorId = 1
                        },
                        new
                        {
                            Id = 2,
                            AlcoholPercentage = 5m,
                            Description = "Experience the enchanting allure of Moonlit Symphony White Wine. Delicately crafted from sun-kissed grapes, this refreshing white wine captivates with its crisp acidity and vibrant fruit flavors. With hints of citrus, green apple, and tropical notes, each sip evokes a sense of serenity and sophistication. Whether enjoyed on a warm summer evening or paired with your favorite seafood dish, Moonlit Symphony is sure to elevate any occasion.",
                            IsApproved = true,
                            Name = "Moonlit Symphony White Wine",
                            PackagingSize = 2.5m,
                            Photo = "wine2.png",
                            PricingId = 2,
                            ProductCategoryId = 2,
                            Quantity = 55,
                            SectorId = 2
                        },
                        new
                        {
                            Id = 3,
                            AlcoholPercentage = 5m,
                            Description = "Transport your senses to a blooming garden with Blush Blossom Rosé Wine. Crafted from select grapes kissed by the gentle rays of the sun, this elegant rosé captivates with its delicate pink hue and enchanting aromas of fresh strawberries and rose petals. With a balanced acidity and subtle sweetness, each sip unfolds like a bouquet of spring flowers. Whether enjoyed with light salads, creamy cheeses, or simply on its own, Blush Blossom is a celebration of life's beautiful moments.",
                            IsApproved = true,
                            Name = "Blush Blossom Rosé Wine",
                            PackagingSize = 1.5m,
                            Photo = "wine3.png",
                            PricingId = 3,
                            ProductCategoryId = 3,
                            Quantity = 25,
                            SectorId = 2
                        },
                        new
                        {
                            Id = 4,
                            AlcoholPercentage = 5m,
                            Description = "Embark on a journey of elegance with Golden Harvest Chardonnay. Grown in sun-drenched vineyards and carefully aged in oak barrels, this exquisite white wine dazzles with its golden hue and rich, buttery texture. With flavors of ripe peach, toasted vanilla, and a hint of caramel, each sip unfolds like a symphony of indulgence. Whether paired with creamy pastas or enjoyed on its own, Golden Harvest is a testament to the artistry of winemaking.",
                            IsApproved = false,
                            Name = "Golden Harvest Chardonnay",
                            PackagingSize = 1.5m,
                            Photo = "wine3.png",
                            PricingId = 4,
                            ProductCategoryId = 2,
                            Quantity = 40,
                            SectorId = 2
                        },
                        new
                        {
                            Id = 5,
                            AlcoholPercentage = 5m,
                            Description = "Discover the allure of Midnight Noir Cabernet Sauvignon. Born from the dark, fertile soils of our vineyards, this bold red wine entices with its deep crimson color and intense aromas of blackberries and plum. With velvety tannins and a lingering finish, each sip evokes a sense of mystery and intrigue. Whether paired with hearty stews or enjoyed on its own, Midnight Noir is a tribute to the enchantment of the night.",
                            IsApproved = true,
                            Name = "Midnight Noir Cabernet Sauvignon",
                            PackagingSize = 1.5m,
                            Photo = "wine3.png",
                            PricingId = 3,
                            ProductCategoryId = 1,
                            Quantity = 30,
                            SectorId = 1
                        },
                        new
                        {
                            Id = 6,
                            AlcoholPercentage = 5m,
                            Description = "Awaken your senses with Sunrise Serenade Sauvignon Blanc. Harvested in the early morning light, this crisp white wine exudes freshness and vitality. With vibrant flavors of citrus, melon, and a hint of fresh-cut grass, each sip is a symphony of brightness and clarity. Whether enjoyed with light salads or seafood dishes, Sunrise Serenade is a celebration of new beginnings.",
                            IsApproved = false,
                            Name = "Sunrise Serenade Sauvignon Blanc",
                            PackagingSize = 1.5m,
                            Photo = "wine3.png",
                            PricingId = 4,
                            ProductCategoryId = 2,
                            Quantity = 50,
                            SectorId = 1
                        });
                });

            modelBuilder.Entity("ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Red"
                        },
                        new
                        {
                            Id = 2,
                            Name = "White"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Rose"
                        });
                });

            modelBuilder.Entity("Purchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PurchaseStatus")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("Purchases", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 5, 23, 0, 0, 0, 0, DateTimeKind.Local),
                            CustomerId = 1,
                            Note = "fewfw",
                            PurchaseStatus = 0,
                            Total = 32.219999999999999
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 5, 23, 0, 0, 0, 0, DateTimeKind.Local),
                            CustomerId = 1,
                            Note = "fewfw",
                            PurchaseStatus = 1,
                            Total = 52.219999999999999
                        });
                });

            modelBuilder.Entity("PurchasedProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PurchaseProducts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProductId = 1,
                            PurchaseId = 1,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 2,
                            ProductId = 2,
                            PurchaseId = 1,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 3,
                            ProductId = 1,
                            PurchaseId = 2,
                            Quantity = 17
                        });
                });

            modelBuilder.Entity("winery_backend.Activity.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("ActivityType")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ParcelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ParcelId");

                    b.ToTable("Activities", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("winery_backend.Invetory.SupplyOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<bool>("Completed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DaysUntilDelivery")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("SupplierSupplyIds")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("SupplyOrderCreationTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("SupplyOrders", (string)null);
                });

            modelBuilder.Entity("winery_backend.LogisticianManufacturingOrder.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SupplierId"));

                    b.Property<string>("SupplierAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SupplierProductIds")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("SupplierId");

                    b.ToTable("Suppliers", (string)null);
                });

            modelBuilder.Entity("winery_backend.LogisticianManufacturingOrder.Models.SupplierProduct", b =>
                {
                    b.Property<int>("SupplierProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SupplierProductId"));

                    b.Property<int>("SupplierProductAmount")
                        .HasColumnType("int");

                    b.Property<string>("SupplierProductManufacturer")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SupplierProductName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("SupplierProductPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("SupplierProductId");

                    b.ToTable("SupplierProducts", (string)null);
                });

            modelBuilder.Entity("winery_backend.LogisticianViewCustomerOrder.Models.CustomerOrder", b =>
                {
                    b.Property<int>("CustomerOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CustomerOrderId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CustomerOrderCreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CustomerOrderDeliveryDeadline")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("CustomerOrderPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("OrderTrackingStatusId")
                        .HasColumnType("int");

                    b.Property<string>("ProductIds")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Quantities")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CustomerOrderId");

                    b.ToTable("CustomerOrders", (string)null);

                    b.HasData(
                        new
                        {
                            CustomerOrderId = 1,
                            CustomerId = 1,
                            CustomerOrderCreationTime = new DateTime(2024, 5, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerOrderDeliveryDeadline = new DateTime(2024, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerOrderPrice = 7000m,
                            OrderTrackingStatusId = 1,
                            ProductIds = "[1,2]",
                            Quantities = "[3,2]"
                        },
                        new
                        {
                            CustomerOrderId = 2,
                            CustomerId = 1,
                            CustomerOrderCreationTime = new DateTime(2024, 5, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerOrderDeliveryDeadline = new DateTime(2024, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerOrderPrice = 12000m,
                            OrderTrackingStatusId = 1,
                            ProductIds = "[2]",
                            Quantities = "[6]"
                        },
                        new
                        {
                            CustomerOrderId = 3,
                            CustomerId = 2,
                            CustomerOrderCreationTime = new DateTime(2024, 5, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerOrderDeliveryDeadline = new DateTime(2024, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerOrderPrice = 13500m,
                            OrderTrackingStatusId = 1,
                            ProductIds = "[2,5]",
                            Quantities = "[6,1]"
                        },
                        new
                        {
                            CustomerOrderId = 4,
                            CustomerId = 2,
                            CustomerOrderCreationTime = new DateTime(2024, 5, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerOrderDeliveryDeadline = new DateTime(2024, 6, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerOrderPrice = 9000m,
                            OrderTrackingStatusId = 1,
                            ProductIds = "[2,3,5]",
                            Quantities = "[2,3,4]"
                        },
                        new
                        {
                            CustomerOrderId = 5,
                            CustomerId = 2,
                            CustomerOrderCreationTime = new DateTime(2024, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerOrderDeliveryDeadline = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerOrderPrice = 9000m,
                            OrderTrackingStatusId = 2,
                            ProductIds = "[1,4]",
                            Quantities = "[4,10]"
                        });
                });

            modelBuilder.Entity("winery_backend.LogisticianViewCustomerOrder.Models.RealTimeOrderTrackingStatus", b =>
                {
                    b.Property<int>("RealTimeOrderTrackingStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("RealTimeOrderTrackingStatusId"));

                    b.Property<string>("OrderTrackingStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("RealTimeOrderTrackingStatusId");

                    b.ToTable("RealTimeOrderTrackingStatuses", (string)null);

                    b.HasData(
                        new
                        {
                            RealTimeOrderTrackingStatusId = 1,
                            OrderTrackingStatus = "in processing"
                        },
                        new
                        {
                            RealTimeOrderTrackingStatusId = 2,
                            OrderTrackingStatus = "distributed"
                        },
                        new
                        {
                            RealTimeOrderTrackingStatusId = 3,
                            OrderTrackingStatus = "waiting for pick up"
                        },
                        new
                        {
                            RealTimeOrderTrackingStatusId = 4,
                            OrderTrackingStatus = "ready for pick up"
                        },
                        new
                        {
                            RealTimeOrderTrackingStatusId = 5,
                            OrderTrackingStatus = "picked up"
                        },
                        new
                        {
                            RealTimeOrderTrackingStatusId = 6,
                            OrderTrackingStatus = "in transport"
                        },
                        new
                        {
                            RealTimeOrderTrackingStatusId = 7,
                            OrderTrackingStatus = "delivered"
                        },
                        new
                        {
                            RealTimeOrderTrackingStatusId = 8,
                            OrderTrackingStatus = "cancelled"
                        });
                });

            modelBuilder.Entity("winery_backend.Machine.Machine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<bool>("MachineState")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Machines", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 150000L,
                            MachineState = true,
                            Manufacturer = "FarmTech Industries",
                            Name = "Harvesting Machine 2000"
                        },
                        new
                        {
                            Id = 2,
                            Amount = 80000L,
                            MachineState = false,
                            Manufacturer = "WineTech Solutions",
                            Name = "Pressing Machine XL"
                        },
                        new
                        {
                            Id = 3,
                            Amount = 120000L,
                            MachineState = true,
                            Manufacturer = "GrapeMaster Machinery",
                            Name = "Sorting Machine Pro"
                        },
                        new
                        {
                            Id = 4,
                            Amount = 250000L,
                            MachineState = true,
                            Manufacturer = "VinoTech Innovations",
                            Name = "Fermentation Tank V2"
                        });
                });

            modelBuilder.Entity("winery_backend.Machine.MachineOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<bool>("Completed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DaysUntilDelivery")
                        .HasColumnType("int");

                    b.Property<DateTime>("MachineOrderCreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("SupplierMachineIds")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("MachineOrders", (string)null);
                });

            modelBuilder.Entity("winery_backend.PackingRequest.Models.PackingRequest", b =>
                {
                    b.Property<int>("PackingRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PackingRequestId"));

                    b.Property<int>("CustomerOrderId")
                        .HasColumnType("int");

                    b.Property<bool>("Packed")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("PackingRequestCreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("PackingRequestDeadlineDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PackingRequestProductIds")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PackingRequestQuantities")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.HasKey("PackingRequestId");

                    b.ToTable("PackingRequests", (string)null);

                    b.HasData(
                        new
                        {
                            PackingRequestId = 1,
                            CustomerOrderId = 5,
                            Packed = false,
                            PackingRequestCreationDate = new DateTime(2024, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PackingRequestDeadlineDate = new DateTime(2024, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PackingRequestProductIds = "[1]",
                            PackingRequestQuantities = "[4]",
                            SectorId = 1
                        },
                        new
                        {
                            PackingRequestId = 2,
                            CustomerOrderId = 5,
                            Packed = false,
                            PackingRequestCreationDate = new DateTime(2024, 5, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PackingRequestDeadlineDate = new DateTime(2024, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PackingRequestProductIds = "[4]",
                            PackingRequestQuantities = "[10]",
                            SectorId = 2
                        });
                });

            modelBuilder.Entity("winery_backend.Supply.Supply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SupplyType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Supplies", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 256L,
                            Manufacturer = "Gomex",
                            Name = "Grape Fertilizer 10-10-10",
                            SupplyType = 0
                        },
                        new
                        {
                            Id = 2,
                            Amount = 752L,
                            Manufacturer = "Gomex",
                            Name = "Grape Fertilizer 72456",
                            SupplyType = 0
                        },
                        new
                        {
                            Id = 3,
                            Amount = 96L,
                            Manufacturer = "VinoGrow Enterprises",
                            Name = "Vine Vitalizer 12-6-18",
                            SupplyType = 0
                        },
                        new
                        {
                            Id = 4,
                            Amount = 457L,
                            Manufacturer = "Harvest AgroTech",
                            Name = "GrapePro Nutrient Mix 16-10-14",
                            SupplyType = 0
                        },
                        new
                        {
                            Id = 5,
                            Amount = 18L,
                            Manufacturer = "VinoGrow Enterprises",
                            Name = "VineLife Essentials 10-12-18",
                            SupplyType = 0
                        },
                        new
                        {
                            Id = 6,
                            Amount = 985L,
                            Manufacturer = "Gomex",
                            Name = "GrapeGrower's Blend 8-12-20",
                            SupplyType = 0
                        },
                        new
                        {
                            Id = 7,
                            Amount = 182L,
                            Manufacturer = "Gomex",
                            Name = "Vineyard Armor Spray",
                            SupplyType = 1
                        },
                        new
                        {
                            Id = 8,
                            Amount = 445L,
                            Manufacturer = "VinoWarden Agrochemicals",
                            Name = "GrapeProtect Insecticide",
                            SupplyType = 1
                        },
                        new
                        {
                            Id = 9,
                            Amount = 32L,
                            Manufacturer = "VinoWarden Agrochemicals",
                            Name = "VineShield Pest Repellent",
                            SupplyType = 1
                        },
                        new
                        {
                            Id = 10,
                            Amount = 771L,
                            Manufacturer = "Harvest AgroTech",
                            Name = "GrapeSafe Fungicide",
                            SupplyType = 1
                        },
                        new
                        {
                            Id = 11,
                            Amount = 12L,
                            Manufacturer = "VinoGrow Enterprises",
                            Name = "VinePro Shield",
                            SupplyType = 1
                        },
                        new
                        {
                            Id = 12,
                            Amount = 658L,
                            Manufacturer = "Gomex",
                            Name = "GrapeGuardian Pest Management",
                            SupplyType = 1
                        });
                });

            modelBuilder.Entity("winery_backend.TransportRequest.Models.TransportRequest", b =>
                {
                    b.Property<int>("TransportRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TransportRequestId"));

                    b.Property<string>("CustomerDeliveryAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("CustomerOrderId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerUsername")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("PickUpDeadlineDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SectorIdsForPickUp")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("TransportRequestCreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("TransportRequestDeliveryDeadlineDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("VanDriverId")
                        .HasColumnType("int");

                    b.HasKey("TransportRequestId");

                    b.ToTable("TransportRequests", (string)null);
                });

            modelBuilder.Entity("winery_backend.ViewWarehouse.Models.Sector", b =>
                {
                    b.Property<int>("SectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SectorId"));

                    b.Property<string>("SectorImage")
                        .HasColumnType("longtext");

                    b.Property<string>("SectorName")
                        .HasColumnType("longtext");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.Property<int>("WarehousemanId")
                        .HasColumnType("int");

                    b.HasKey("SectorId");

                    b.ToTable("Sectors", (string)null);

                    b.HasData(
                        new
                        {
                            SectorId = 1,
                            SectorImage = "photo_sector_1.png",
                            SectorName = "SECTOR 1",
                            WarehouseId = 1,
                            WarehousemanId = 11
                        },
                        new
                        {
                            SectorId = 2,
                            SectorImage = "photo_sector_2.png",
                            SectorName = "SECTOR 2",
                            WarehouseId = 1,
                            WarehousemanId = 12
                        },
                        new
                        {
                            SectorId = 3,
                            SectorImage = "photo_sector_3.png",
                            SectorName = "SECTOR 3",
                            WarehouseId = 1,
                            WarehousemanId = 13
                        },
                        new
                        {
                            SectorId = 4,
                            SectorImage = "photo_sector_4.png",
                            SectorName = "SECTOR 4",
                            WarehouseId = 1,
                            WarehousemanId = 14
                        },
                        new
                        {
                            SectorId = 5,
                            SectorImage = "photo_sector_5.png",
                            SectorName = "SECTOR 5",
                            WarehouseId = 1,
                            WarehousemanId = 15
                        },
                        new
                        {
                            SectorId = 6,
                            SectorImage = "photo_sector_6.png",
                            SectorName = "SECTOR 6",
                            WarehouseId = 1,
                            WarehousemanId = 16
                        },
                        new
                        {
                            SectorId = 7,
                            SectorImage = "photo_sector_7.png",
                            SectorName = "SECTOR 7",
                            WarehouseId = 1,
                            WarehousemanId = 17
                        },
                        new
                        {
                            SectorId = 8,
                            SectorImage = "photo_sector_8.png",
                            SectorName = "SECTOR 8",
                            WarehouseId = 1,
                            WarehousemanId = 18
                        });
                });

            modelBuilder.Entity("winery_backend.ViewWarehouse.Models.Warehouse", b =>
                {
                    b.Property<int>("WarehouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("WarehouseId"));

                    b.Property<int>("NumberOfSectors")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfVanDrivers")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfWarehouseWorkers")
                        .HasColumnType("int");

                    b.Property<decimal>("WarehouseArea")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("WarehouseImage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("WarehouseLocation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("WarehouseId");

                    b.ToTable("Warehouses", (string)null);

                    b.HasData(
                        new
                        {
                            WarehouseId = 1,
                            NumberOfSectors = 8,
                            NumberOfVanDrivers = 5,
                            NumberOfWarehouseWorkers = 8,
                            WarehouseArea = 5000.5m,
                            WarehouseImage = "photo_warehouse.png",
                            WarehouseLocation = "Nova lokacija 123, Novi Sad",
                            WarehouseName = "Warehouse 1"
                        });
                });

            modelBuilder.Entity("winery_backend.Vineyard.Grape", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("FertilizerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRipe")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("PesticideId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PlantingDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Quality")
                        .HasColumnType("int");

                    b.Property<bool>("Type")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("FertilizerId");

                    b.HasIndex("PesticideId");

                    b.ToTable("Grape");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FertilizerId = 1,
                            IsRipe = false,
                            Name = "Merlot",
                            PesticideId = 7,
                            PlantingDate = new DateTime(2020, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quality = 85,
                            Type = true
                        },
                        new
                        {
                            Id = 2,
                            FertilizerId = 3,
                            IsRipe = true,
                            Name = "Chardonnay",
                            PesticideId = 10,
                            PlantingDate = new DateTime(2019, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quality = 92,
                            Type = false
                        },
                        new
                        {
                            Id = 3,
                            FertilizerId = 2,
                            IsRipe = false,
                            Name = "Cabernet Sauvignon",
                            PesticideId = 8,
                            PlantingDate = new DateTime(2018, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quality = 88,
                            Type = true
                        },
                        new
                        {
                            Id = 4,
                            FertilizerId = 5,
                            IsRipe = true,
                            Name = "Sauvignon Blanc",
                            PesticideId = 11,
                            PlantingDate = new DateTime(2019, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quality = 90,
                            Type = false
                        },
                        new
                        {
                            Id = 5,
                            FertilizerId = 6,
                            IsRipe = true,
                            Name = "Syrah",
                            PesticideId = 12,
                            PlantingDate = new DateTime(2021, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quality = 87,
                            Type = true
                        });
                });

            modelBuilder.Entity("winery_backend.Vineyard.Parcel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<int>("GrapeId")
                        .HasColumnType("int");

                    b.Property<double>("Size")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("GrapeId");

                    b.ToTable("Parcels", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 5000.0,
                            GrapeId = 1,
                            Size = 2.0
                        },
                        new
                        {
                            Id = 2,
                            Amount = 3000.0,
                            GrapeId = 2,
                            Size = 1.0
                        },
                        new
                        {
                            Id = 3,
                            Amount = 7000.0,
                            GrapeId = 3,
                            Size = 3.0
                        },
                        new
                        {
                            Id = 4,
                            Amount = 4500.0,
                            GrapeId = 4,
                            Size = 1.5
                        },
                        new
                        {
                            Id = 5,
                            Amount = 6000.0,
                            GrapeId = 5,
                            Size = 2.5
                        },
                        new
                        {
                            Id = 6,
                            Amount = 4000.0,
                            GrapeId = 1,
                            Size = 2.0
                        },
                        new
                        {
                            Id = 7,
                            Amount = 5500.0,
                            GrapeId = 2,
                            Size = 2.2999999999999998
                        });
                });

            modelBuilder.Entity("Administrator", b =>
                {
                    b.HasBaseType("Employee");

                    b.ToTable("Administrators", (string)null);
                });

            modelBuilder.Entity("Logistician", b =>
                {
                    b.HasBaseType("Employee");

                    b.ToTable("Logisticians", (string)null);
                });

            modelBuilder.Entity("MarketingManager", b =>
                {
                    b.HasBaseType("Employee");

                    b.ToTable("MarketingManagers", (string)null);
                });

            modelBuilder.Entity("Owner", b =>
                {
                    b.HasBaseType("Employee");

                    b.ToTable("Owners", (string)null);
                });

            modelBuilder.Entity("SalesManager", b =>
                {
                    b.HasBaseType("Employee");

                    b.ToTable("SalesManagers", (string)null);
                });

            modelBuilder.Entity("Technologist", b =>
                {
                    b.HasBaseType("Employee");

                    b.ToTable("Technologists", (string)null);
                });

            modelBuilder.Entity("TourGuide", b =>
                {
                    b.HasBaseType("Employee");

                    b.ToTable("TourGuides", (string)null);
                });

            modelBuilder.Entity("VanDriver", b =>
                {
                    b.HasBaseType("Employee");

                    b.Property<string>("SomethingForTest")
                        .HasColumnType("longtext");

                    b.ToTable("VanDrivers", (string)null);
                });

            modelBuilder.Entity("Warehouseman", b =>
                {
                    b.HasBaseType("Employee");

                    b.ToTable("Warehousemen", (string)null);
                });

            modelBuilder.Entity("winery_backend.Activity.Fertilization", b =>
                {
                    b.HasBaseType("winery_backend.Activity.Activity");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<int>("FertilizerId")
                        .HasColumnType("int");

                    b.HasIndex("FertilizerId");

                    b.ToTable("Fertelizations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c487bb3d-2be7-448e-9d21-b2f9fdeba3cb"),
                            ActivityType = 2,
                            EndDate = new DateTime(2024, 4, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = true,
                            ParcelId = 1,
                            StartDate = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Amount = 1000L,
                            FertilizerId = 1
                        },
                        new
                        {
                            Id = new Guid("0ef947a2-8ff7-474b-baff-56047e4eef17"),
                            ActivityType = 2,
                            EndDate = new DateTime(2024, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = true,
                            ParcelId = 2,
                            StartDate = new DateTime(2024, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Amount = 800L,
                            FertilizerId = 2
                        },
                        new
                        {
                            Id = new Guid("395ff95b-3798-4e61-afe2-78bfbfbc273a"),
                            ActivityType = 2,
                            EndDate = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = true,
                            ParcelId = 3,
                            StartDate = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Amount = 1200L,
                            FertilizerId = 3
                        },
                        new
                        {
                            Id = new Guid("e9bd4c22-f614-42a6-9d88-4af225166123"),
                            ActivityType = 2,
                            EndDate = new DateTime(2024, 5, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = false,
                            ParcelId = 4,
                            StartDate = new DateTime(2024, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Amount = 1500L,
                            FertilizerId = 1
                        },
                        new
                        {
                            Id = new Guid("8a085709-fbee-486b-8a3c-caa624595504"),
                            ActivityType = 2,
                            EndDate = new DateTime(2024, 6, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = false,
                            ParcelId = 5,
                            StartDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Amount = 2000L,
                            FertilizerId = 2
                        });
                });

            modelBuilder.Entity("winery_backend.Activity.Harvesting", b =>
                {
                    b.HasBaseType("winery_backend.Activity.Activity");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.ToTable("Harvestings", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("56b5318c-172e-4ca2-b6ea-3e2cdd43f678"),
                            ActivityType = 0,
                            EndDate = new DateTime(2024, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = false,
                            ParcelId = 1,
                            StartDate = new DateTime(2024, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Amount = 12000L
                        },
                        new
                        {
                            Id = new Guid("482ce4ff-552c-4048-8309-fa9388336e5e"),
                            ActivityType = 0,
                            EndDate = new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = false,
                            ParcelId = 2,
                            StartDate = new DateTime(2024, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Amount = 9000L
                        },
                        new
                        {
                            Id = new Guid("061d26c4-6204-4371-9df4-5f8420a0d912"),
                            ActivityType = 0,
                            EndDate = new DateTime(2024, 10, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = false,
                            ParcelId = 3,
                            StartDate = new DateTime(2024, 9, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Amount = 15000L
                        },
                        new
                        {
                            Id = new Guid("082f2e0f-5ef3-431a-bbd5-e4b229b36e3d"),
                            ActivityType = 0,
                            EndDate = new DateTime(2024, 10, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = false,
                            ParcelId = 4,
                            StartDate = new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Amount = 10500L
                        },
                        new
                        {
                            Id = new Guid("011ab339-36f0-4742-b61f-98ac0594ddcd"),
                            ActivityType = 0,
                            EndDate = new DateTime(2024, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = false,
                            ParcelId = 5,
                            StartDate = new DateTime(2024, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Amount = 13500L
                        });
                });

            modelBuilder.Entity("winery_backend.Activity.PesticideControl", b =>
                {
                    b.HasBaseType("winery_backend.Activity.Activity");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<int>("PesticideId")
                        .HasColumnType("int");

                    b.HasIndex("PesticideId");

                    b.ToTable("PesticideControls", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ce8f597a-8d0b-4d4c-a931-93e178fed224"),
                            ActivityType = 3,
                            EndDate = new DateTime(2024, 4, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = true,
                            ParcelId = 1,
                            StartDate = new DateTime(2024, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Amount = 500L,
                            PesticideId = 1
                        },
                        new
                        {
                            Id = new Guid("4ff5862b-1068-4035-b280-71e383dd955e"),
                            ActivityType = 3,
                            EndDate = new DateTime(2024, 4, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = true,
                            ParcelId = 2,
                            StartDate = new DateTime(2024, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Amount = 700L,
                            PesticideId = 2
                        },
                        new
                        {
                            Id = new Guid("47f2264a-271c-406b-b516-e10f798ff065"),
                            ActivityType = 3,
                            EndDate = new DateTime(2024, 5, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = true,
                            ParcelId = 3,
                            StartDate = new DateTime(2024, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Amount = 1000L,
                            PesticideId = 3
                        },
                        new
                        {
                            Id = new Guid("723b756d-fec8-467b-be6a-c1427442d2e9"),
                            ActivityType = 3,
                            EndDate = new DateTime(2024, 5, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = false,
                            ParcelId = 4,
                            StartDate = new DateTime(2024, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Amount = 1200L,
                            PesticideId = 1
                        },
                        new
                        {
                            Id = new Guid("ccc7b458-7bbc-4f2c-bf73-91f2bb7d402f"),
                            ActivityType = 3,
                            EndDate = new DateTime(2024, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = false,
                            ParcelId = 5,
                            StartDate = new DateTime(2024, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Amount = 1500L,
                            PesticideId = 2
                        });
                });

            modelBuilder.Entity("winery_backend.Activity.Watering", b =>
                {
                    b.HasBaseType("winery_backend.Activity.Activity");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.ToTable("Waterings", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7c810301-60a5-4f5e-b59b-0f60aaa97027"),
                            ActivityType = 1,
                            EndDate = new DateTime(2024, 5, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = false,
                            ParcelId = 1,
                            StartDate = new DateTime(2024, 5, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Amount = 5000L
                        },
                        new
                        {
                            Id = new Guid("8d828aa9-5f77-40e1-b8f0-3d09ed25d9fc"),
                            ActivityType = 1,
                            EndDate = new DateTime(2024, 5, 5, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = false,
                            ParcelId = 2,
                            StartDate = new DateTime(2024, 5, 5, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Amount = 7000L
                        },
                        new
                        {
                            Id = new Guid("974ab414-2ad9-4405-80a0-3114e31a11fa"),
                            ActivityType = 1,
                            EndDate = new DateTime(2024, 5, 10, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = false,
                            ParcelId = 3,
                            StartDate = new DateTime(2024, 5, 10, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Amount = 6000L
                        },
                        new
                        {
                            Id = new Guid("b21123b9-02ff-459f-9e1e-d14dbdb31f8d"),
                            ActivityType = 1,
                            EndDate = new DateTime(2024, 5, 15, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = false,
                            ParcelId = 4,
                            StartDate = new DateTime(2024, 5, 15, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Amount = 5500L
                        },
                        new
                        {
                            Id = new Guid("61a4b92f-e759-4f6d-880c-acd75fe3deb5"),
                            ActivityType = 1,
                            EndDate = new DateTime(2024, 5, 20, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = false,
                            ParcelId = 5,
                            StartDate = new DateTime(2024, 5, 20, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Amount = 4500L
                        });
                });

            modelBuilder.Entity("Cart", b =>
                {
                    b.HasOne("Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CartProduct", b =>
                {
                    b.HasOne("Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Customer", b =>
                {
                    b.HasOne("City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.Navigation("City");
                });

            modelBuilder.Entity("Pricing", b =>
                {
                    b.HasOne("Discount", "Discount")
                        .WithMany()
                        .HasForeignKey("DiscountId");

                    b.Navigation("Discount");
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.HasOne("Pricing", "Pricing")
                        .WithMany()
                        .HasForeignKey("PricingId");

                    b.HasOne("ProductCategory", "ProductCategory")
                        .WithMany()
                        .HasForeignKey("ProductCategoryId");

                    b.Navigation("Pricing");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("winery_backend.Activity.Activity", b =>
                {
                    b.HasOne("winery_backend.Vineyard.Parcel", "Parcel")
                        .WithMany()
                        .HasForeignKey("ParcelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parcel");
                });

            modelBuilder.Entity("winery_backend.Vineyard.Grape", b =>
                {
                    b.HasOne("winery_backend.Supply.Supply", "Fertilizer")
                        .WithMany()
                        .HasForeignKey("FertilizerId");

                    b.HasOne("winery_backend.Supply.Supply", "Pesticide")
                        .WithMany()
                        .HasForeignKey("PesticideId");

                    b.Navigation("Fertilizer");

                    b.Navigation("Pesticide");
                });

            modelBuilder.Entity("winery_backend.Vineyard.Parcel", b =>
                {
                    b.HasOne("winery_backend.Vineyard.Grape", "Grape")
                        .WithMany()
                        .HasForeignKey("GrapeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grape");
                });

            modelBuilder.Entity("Administrator", b =>
                {
                    b.HasOne("Employee", null)
                        .WithOne()
                        .HasForeignKey("Administrator", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Logistician", b =>
                {
                    b.HasOne("Employee", null)
                        .WithOne()
                        .HasForeignKey("Logistician", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarketingManager", b =>
                {
                    b.HasOne("Employee", null)
                        .WithOne()
                        .HasForeignKey("MarketingManager", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Owner", b =>
                {
                    b.HasOne("Employee", null)
                        .WithOne()
                        .HasForeignKey("Owner", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SalesManager", b =>
                {
                    b.HasOne("Employee", null)
                        .WithOne()
                        .HasForeignKey("SalesManager", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Technologist", b =>
                {
                    b.HasOne("Employee", null)
                        .WithOne()
                        .HasForeignKey("Technologist", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TourGuide", b =>
                {
                    b.HasOne("Employee", null)
                        .WithOne()
                        .HasForeignKey("TourGuide", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VanDriver", b =>
                {
                    b.HasOne("Employee", null)
                        .WithOne()
                        .HasForeignKey("VanDriver", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Warehouseman", b =>
                {
                    b.HasOne("Employee", null)
                        .WithOne()
                        .HasForeignKey("Warehouseman", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("winery_backend.Activity.Fertilization", b =>
                {
                    b.HasOne("winery_backend.Supply.Supply", "Fertilizer")
                        .WithMany()
                        .HasForeignKey("FertilizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("winery_backend.Activity.Activity", null)
                        .WithOne()
                        .HasForeignKey("winery_backend.Activity.Fertilization", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fertilizer");
                });

            modelBuilder.Entity("winery_backend.Activity.Harvesting", b =>
                {
                    b.HasOne("winery_backend.Activity.Activity", null)
                        .WithOne()
                        .HasForeignKey("winery_backend.Activity.Harvesting", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("winery_backend.Activity.PesticideControl", b =>
                {
                    b.HasOne("winery_backend.Activity.Activity", null)
                        .WithOne()
                        .HasForeignKey("winery_backend.Activity.PesticideControl", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("winery_backend.Supply.Supply", "Pesticide")
                        .WithMany()
                        .HasForeignKey("PesticideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pesticide");
                });

            modelBuilder.Entity("winery_backend.Activity.Watering", b =>
                {
                    b.HasOne("winery_backend.Activity.Activity", null)
                        .WithOne()
                        .HasForeignKey("winery_backend.Activity.Watering", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
