// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace winery_backend.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Cities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Belgrade",
                            Zip = "11000"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Novi Sad",
                            Zip = "21000"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Niš",
                            Zip = "18000"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Kragujevac",
                            Zip = "34000"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Subotica",
                            Zip = "24000"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Zrenjanin",
                            Zip = "23000"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Pančevo",
                            Zip = "26000"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Čačak",
                            Zip = "32000"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Kraljevo",
                            Zip = "36000"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Smederevo",
                            Zip = "11300"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Leskovac",
                            Zip = "16000"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Valjevo",
                            Zip = "14000"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Užice",
                            Zip = "31000"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Šabac",
                            Zip = "15000"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Novi Pazar",
                            Zip = "36300"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Negotin",
                            Zip = "19300"
                        });
                });

            modelBuilder.Entity("Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Door")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Firstname")
                        .HasColumnType("longtext");

                    b.Property<string>("Floor")
                        .HasColumnType("longtext");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Lastname")
                        .HasColumnType("longtext");

                    b.Property<string>("Number")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<int?>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Customers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1990, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityId = 1,
                            Email = "john.doe@example.com",
                            Firstname = "John",
                            Gender = 1,
                            Lastname = "Doe",
                            Number = "101",
                            Password = "hashedpassword",
                            PhoneNumber = "1234567890",
                            Role = 9,
                            Street = "123 Main St",
                            Username = "johndoe"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(1992, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityId = 2,
                            Door = "3",
                            Email = "jane.doe@example.com",
                            Firstname = "Jane",
                            Floor = "2",
                            Gender = 0,
                            Lastname = "Doe",
                            Number = "202",
                            Password = "hashedpassword",
                            PhoneNumber = "9876543210",
                            Role = 9,
                            Street = "456 Elm St",
                            Username = "janedoe"
                        });
                });

            modelBuilder.Entity("Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Firstname")
                        .HasColumnType("longtext");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Lastname")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("ProfilePhoto")
                        .HasColumnType("longtext");

                    b.Property<int?>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Employees", (string)null);

                    b.UseTptMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1990, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "pera.peric@example.com",
                            Firstname = "Pera",
                            Gender = 1,
                            Lastname = "Peric",
                            Password = "hashedpassword",
                            PhoneNumber = "1234567890",
                            ProfilePhoto = "somepath",
                            Role = 7,
                            Username = "peraperic"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(1992, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "imenko@example.com",
                            Firstname = "Imenko",
                            Gender = 1,
                            Lastname = "Prezimenic",
                            Password = "hashedpassword",
                            PhoneNumber = "9876543210",
                            ProfilePhoto = "somepath",
                            Role = 0,
                            Username = "imenko"
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(1982, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@admin.com",
                            Firstname = "Admin",
                            Gender = 1,
                            Lastname = "Adminovic",
                            Password = "$2a$10$dVNZNTm8Ts9fGjM3M8QuE.LF0ZutYn1utYoeSdfZZXbB0ec9MjBUS",
                            PhoneNumber = "061111111",
                            ProfilePhoto = "somepath",
                            Role = 0,
                            Username = "admin123"
                        },
                        new
                        {
                            Id = 11,
                            BirthDate = new DateTime(1990, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "warehouseman_email_1@gmail.com",
                            Firstname = "warehouseman_first_name_1",
                            Gender = 1,
                            Lastname = "warehouseman_last_name_1",
                            Password = "a",
                            PhoneNumber = "061123123",
                            ProfilePhoto = "photo_warehouseman_1.png",
                            Role = 4,
                            Username = "warehouseman_1"
                        },
                        new
                        {
                            Id = 12,
                            BirthDate = new DateTime(1991, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "warehouseman_email_2@gmail.com",
                            Firstname = "warehouseman_first_name_2",
                            Gender = 1,
                            Lastname = "warehouseman_last_name_2",
                            Password = "a",
                            PhoneNumber = "062345345",
                            ProfilePhoto = "photo_warehouseman_2.png",
                            Role = 4,
                            Username = "warehouseman_2"
                        },
                        new
                        {
                            Id = 13,
                            BirthDate = new DateTime(1992, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "warehouseman_email_3@gmail.com",
                            Firstname = "warehouseman_first_name_3",
                            Gender = 0,
                            Lastname = "warehouseman_last_name_3",
                            Password = "a",
                            PhoneNumber = "063456789",
                            ProfilePhoto = "photo_warehouseman_3.png",
                            Role = 4,
                            Username = "warehouseman_3"
                        },
                        new
                        {
                            Id = 14,
                            BirthDate = new DateTime(1993, 8, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "warehouseman_email_4@gmail.com",
                            Firstname = "warehouseman_first_name_4",
                            Gender = 0,
                            Lastname = "warehouseman_last_name_4",
                            Password = "a",
                            PhoneNumber = "064123123",
                            ProfilePhoto = "photo_warehouseman_4.png",
                            Role = 4,
                            Username = "warehouseman_4"
                        },
                        new
                        {
                            Id = 15,
                            BirthDate = new DateTime(1994, 9, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "warehouseman_email_5@gmail.com",
                            Firstname = "warehouseman_first_name_5",
                            Gender = 1,
                            Lastname = "warehouseman_last_name_5",
                            Password = "a",
                            PhoneNumber = "066234567",
                            ProfilePhoto = "photo_warehouseman_5.png",
                            Role = 4,
                            Username = "warehouseman_5"
                        },
                        new
                        {
                            Id = 16,
                            BirthDate = new DateTime(1995, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "warehouseman_email_6@gmail.com",
                            Firstname = "warehouseman_first_name_6",
                            Gender = 1,
                            Lastname = "warehouseman_last_name_6",
                            Password = "a",
                            PhoneNumber = "063456789",
                            ProfilePhoto = "photo_warehouseman_6.png",
                            Role = 4,
                            Username = "warehouseman_6"
                        },
                        new
                        {
                            Id = 17,
                            BirthDate = new DateTime(1996, 11, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "warehouseman_email_7@gmail.com",
                            Firstname = "warehouseman_first_name_7",
                            Gender = 0,
                            Lastname = "warehouseman_last_name_7",
                            Password = "a",
                            PhoneNumber = "061456789",
                            ProfilePhoto = "photo_warehouseman_7.png",
                            Role = 4,
                            Username = "warehouseman_7"
                        },
                        new
                        {
                            Id = 18,
                            BirthDate = new DateTime(1997, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "warehouseman_email_8@gmail.com",
                            Firstname = "warehouseman_first_name_8",
                            Gender = 0,
                            Lastname = "warehouseman_last_name_8",
                            Password = "a",
                            PhoneNumber = "069123123",
                            ProfilePhoto = "photo_warehouseman_8.png",
                            Role = 4,
                            Username = "warehouseman_8"
                        },
                        new
                        {
                            Id = 21,
                            BirthDate = new DateTime(1998, 1, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "van_driver_email_1@gmail.com",
                            Firstname = "van_driver_first_name_1",
                            Gender = 1,
                            Lastname = "van_driver_last_name_1",
                            Password = "a",
                            PhoneNumber = "062111111",
                            ProfilePhoto = "photo_van_driver_1.png",
                            Role = 7,
                            Username = "van_driver_1"
                        },
                        new
                        {
                            Id = 22,
                            BirthDate = new DateTime(1999, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "van_driver_email_2@gmail.com",
                            Firstname = "van_driver_first_name_2",
                            Gender = 1,
                            Lastname = "van_driver_last_name_2",
                            Password = "a",
                            PhoneNumber = "062222222",
                            ProfilePhoto = "photo_van_driver_2.png",
                            Role = 7,
                            Username = "van_driver_2"
                        },
                        new
                        {
                            Id = 23,
                            BirthDate = new DateTime(2000, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "van_driver_email_3@gmail.com",
                            Firstname = "van_driver_first_name_3",
                            Gender = 0,
                            Lastname = "van_driver_last_name_3",
                            Password = "a",
                            PhoneNumber = "062333333",
                            ProfilePhoto = "photo_van_driver_3.png",
                            Role = 7,
                            Username = "van_driver_3"
                        },
                        new
                        {
                            Id = 24,
                            BirthDate = new DateTime(2001, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "van_driver_email_4@gmail.com",
                            Firstname = "van_driver_first_name_4",
                            Gender = 0,
                            Lastname = "van_driver_last_name_4",
                            Password = "a",
                            PhoneNumber = "062444444",
                            ProfilePhoto = "photo_van_driver_4.png",
                            Role = 7,
                            Username = "van_driver_4"
                        });
                });

            modelBuilder.Entity("winery_backend.LogisticianViewCustomerOrder.Models.CustomerOrder", b =>
                {
                    b.Property<int>("CustomerOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CustomerOrderId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CustomerOrderCreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CustomerOrderDeliveryDeadline")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("CustomerOrderPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("OrderTrackingStatusId")
                        .HasColumnType("int");

                    b.Property<string>("ProductIds")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Quantities")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CustomerOrderId");

                    b.ToTable("CustomerOrders", (string)null);

                    b.HasData(
                        new
                        {
                            CustomerOrderId = 1,
                            CustomerId = 1,
                            CustomerOrderCreationTime = new DateTime(2024, 5, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerOrderDeliveryDeadline = new DateTime(2024, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerOrderPrice = 7000m,
                            OrderTrackingStatusId = 1,
                            ProductIds = "[1,2]",
                            Quantities = "[3,2]"
                        },
                        new
                        {
                            CustomerOrderId = 2,
                            CustomerId = 1,
                            CustomerOrderCreationTime = new DateTime(2024, 5, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerOrderDeliveryDeadline = new DateTime(2024, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerOrderPrice = 12000m,
                            OrderTrackingStatusId = 1,
                            ProductIds = "[2]",
                            Quantities = "[6]"
                        },
                        new
                        {
                            CustomerOrderId = 3,
                            CustomerId = 2,
                            CustomerOrderCreationTime = new DateTime(2024, 5, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerOrderDeliveryDeadline = new DateTime(2024, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerOrderPrice = 13500m,
                            OrderTrackingStatusId = 1,
                            ProductIds = "[2,5]",
                            Quantities = "[6,1]"
                        },
                        new
                        {
                            CustomerOrderId = 4,
                            CustomerId = 2,
                            CustomerOrderCreationTime = new DateTime(2024, 5, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerOrderDeliveryDeadline = new DateTime(2024, 6, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerOrderPrice = 9000m,
                            OrderTrackingStatusId = 1,
                            ProductIds = "[2,3,5]",
                            Quantities = "[2,3,4]"
                        },
                        new
                        {
                            CustomerOrderId = 5,
                            CustomerId = 2,
                            CustomerOrderCreationTime = new DateTime(2024, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerOrderDeliveryDeadline = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerOrderPrice = 9000m,
                            OrderTrackingStatusId = 2,
                            ProductIds = "[2]",
                            Quantities = "[4,10]"
                        });
                });

            modelBuilder.Entity("winery_backend.LogisticianViewCustomerOrder.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<decimal>("AlcoholPercentage")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("PackagingSize")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ProductPrice")
                        .HasColumnType("int");

                    b.Property<int>("ProductQuantity")
                        .HasColumnType("int");

                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.Property<string>("WineSort")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ProductId");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            AlcoholPercentage = 5m,
                            PackagingSize = 1.5m,
                            Photo = "photo_product_1.png",
                            ProductDescription = "nice product",
                            ProductName = "product1",
                            ProductPrice = 1000,
                            ProductQuantity = 100,
                            SectorId = 1,
                            WineSort = "sort_1"
                        },
                        new
                        {
                            ProductId = 2,
                            AlcoholPercentage = 6m,
                            PackagingSize = 0.5m,
                            Photo = "photo_product_2.png",
                            ProductDescription = "nice product",
                            ProductName = "product2",
                            ProductPrice = 2000,
                            ProductQuantity = 50,
                            SectorId = 2,
                            WineSort = "sort_2"
                        },
                        new
                        {
                            ProductId = 3,
                            AlcoholPercentage = 3m,
                            PackagingSize = 1.5m,
                            Photo = "photo_product_3.png",
                            ProductDescription = "nice product",
                            ProductName = "product3",
                            ProductPrice = 1000,
                            ProductQuantity = 150,
                            SectorId = 2,
                            WineSort = "sort_2"
                        },
                        new
                        {
                            ProductId = 4,
                            AlcoholPercentage = 8.5m,
                            PackagingSize = 1m,
                            Photo = "photo_product_4.png",
                            ProductDescription = "nice product",
                            ProductName = "product4",
                            ProductPrice = 500,
                            ProductQuantity = 250,
                            SectorId = 2,
                            WineSort = "sort_2"
                        },
                        new
                        {
                            ProductId = 5,
                            AlcoholPercentage = 10m,
                            PackagingSize = 0.5m,
                            Photo = "photo_product_5.png",
                            ProductDescription = "nice product",
                            ProductName = "product5",
                            ProductPrice = 1500,
                            ProductQuantity = 150,
                            SectorId = 1,
                            WineSort = "sort_1"
                        });
                });

            modelBuilder.Entity("winery_backend.LogisticianViewCustomerOrder.Models.RealTimeOrderTrackingStatus", b =>
                {
                    b.Property<int>("RealTimeOrderTrackingStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("RealTimeOrderTrackingStatusId"));

                    b.Property<string>("OrderTrackingStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("RealTimeOrderTrackingStatusId");

                    b.ToTable("RealTimeOrderTrackingStatuses", (string)null);

                    b.HasData(
                        new
                        {
                            RealTimeOrderTrackingStatusId = 1,
                            OrderTrackingStatus = "in processing"
                        },
                        new
                        {
                            RealTimeOrderTrackingStatusId = 2,
                            OrderTrackingStatus = "distributed"
                        },
                        new
                        {
                            RealTimeOrderTrackingStatusId = 3,
                            OrderTrackingStatus = "ready for pick up"
                        },
                        new
                        {
                            RealTimeOrderTrackingStatusId = 4,
                            OrderTrackingStatus = "picked up"
                        },
                        new
                        {
                            RealTimeOrderTrackingStatusId = 5,
                            OrderTrackingStatus = "in transport"
                        },
                        new
                        {
                            RealTimeOrderTrackingStatusId = 6,
                            OrderTrackingStatus = "delivered"
                        });
                });

            modelBuilder.Entity("winery_backend.PackingRequest.Models.PackingRequest", b =>
                {
                    b.Property<int>("PackingRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PackingRequestId"));

                    b.Property<int>("CustomerOrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PackingRequestCreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("PackingRequestDeadlineDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PackingRequestProductIds")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PackingRequestQuantities")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.HasKey("PackingRequestId");

                    b.ToTable("PackingRequests", (string)null);

                    b.HasData(
                        new
                        {
                            PackingRequestId = 1,
                            CustomerOrderId = 5,
                            PackingRequestCreationDate = new DateTime(2024, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PackingRequestDeadlineDate = new DateTime(2024, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PackingRequestProductIds = "[1]",
                            PackingRequestQuantities = "[4]",
                            SectorId = 1
                        },
                        new
                        {
                            PackingRequestId = 2,
                            CustomerOrderId = 5,
                            PackingRequestCreationDate = new DateTime(2024, 5, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PackingRequestDeadlineDate = new DateTime(2024, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PackingRequestProductIds = "[4]",
                            PackingRequestQuantities = "[10]",
                            SectorId = 2
                        });
                });

            modelBuilder.Entity("winery_backend.TransportRequest.Models.TransportRequest", b =>
                {
                    b.Property<int>("TransportRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TransportRequestId"));

                    b.Property<string>("CustomerDeliveryAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("CustomerOrderId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerUsername")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("PickUpDeadlineDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SectorIdsForPickUp")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("TransportRequestCreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("TransportRequestDeliveryDeadlineDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("VanDriverId")
                        .HasColumnType("int");

                    b.HasKey("TransportRequestId");

                    b.ToTable("TransportRequests", (string)null);
                });

            modelBuilder.Entity("winery_backend.ViewWarehouse.Models.Sector", b =>
                {
                    b.Property<int>("SectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SectorId"));

                    b.Property<string>("SectorImage")
                        .HasColumnType("longtext");

                    b.Property<string>("SectorName")
                        .HasColumnType("longtext");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.Property<int>("WarehousemanId")
                        .HasColumnType("int");

                    b.HasKey("SectorId");

                    b.ToTable("Sectors", (string)null);

                    b.HasData(
                        new
                        {
                            SectorId = 1,
                            SectorImage = "photo_sector_1.png",
                            SectorName = "SECTOR 1",
                            WarehouseId = 1,
                            WarehousemanId = 11
                        },
                        new
                        {
                            SectorId = 2,
                            SectorImage = "photo_sector_2.png",
                            SectorName = "SECTOR 2",
                            WarehouseId = 1,
                            WarehousemanId = 12
                        },
                        new
                        {
                            SectorId = 3,
                            SectorImage = "photo_sector_3.png",
                            SectorName = "SECTOR 3",
                            WarehouseId = 1,
                            WarehousemanId = 13
                        },
                        new
                        {
                            SectorId = 4,
                            SectorImage = "photo_sector_4.png",
                            SectorName = "SECTOR 4",
                            WarehouseId = 1,
                            WarehousemanId = 14
                        },
                        new
                        {
                            SectorId = 5,
                            SectorImage = "photo_sector_5.png",
                            SectorName = "SECTOR 5",
                            WarehouseId = 1,
                            WarehousemanId = 15
                        },
                        new
                        {
                            SectorId = 6,
                            SectorImage = "photo_sector_6.png",
                            SectorName = "SECTOR 6",
                            WarehouseId = 1,
                            WarehousemanId = 16
                        },
                        new
                        {
                            SectorId = 7,
                            SectorImage = "photo_sector_7.png",
                            SectorName = "SECTOR 7",
                            WarehouseId = 1,
                            WarehousemanId = 17
                        },
                        new
                        {
                            SectorId = 8,
                            SectorImage = "photo_sector_8.png",
                            SectorName = "SECTOR 8",
                            WarehouseId = 1,
                            WarehousemanId = 18
                        });
                });

            modelBuilder.Entity("winery_backend.ViewWarehouse.Models.Warehouse", b =>
                {
                    b.Property<int>("WarehouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("WarehouseId"));

                    b.Property<int>("NumberOfSectors")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfVanDrivers")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfWarehouseWorkers")
                        .HasColumnType("int");

                    b.Property<decimal>("WarehouseArea")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("WarehouseImage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("WarehouseLocation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("WarehouseId");

                    b.ToTable("Warehouses", (string)null);

                    b.HasData(
                        new
                        {
                            WarehouseId = 1,
                            NumberOfSectors = 8,
                            NumberOfVanDrivers = 5,
                            NumberOfWarehouseWorkers = 8,
                            WarehouseArea = 5000.5m,
                            WarehouseImage = "photo_warehouse.png",
                            WarehouseLocation = "Nova lokacija 123, Novi Sad",
                            WarehouseName = "Warehouse 1"
                        });
                });

            modelBuilder.Entity("Administrator", b =>
                {
                    b.HasBaseType("Employee");

                    b.ToTable("Administrators", (string)null);
                });

            modelBuilder.Entity("Logistician", b =>
                {
                    b.HasBaseType("Employee");

                    b.ToTable("Logisticians", (string)null);
                });

            modelBuilder.Entity("MarketingManager", b =>
                {
                    b.HasBaseType("Employee");

                    b.ToTable("MarketingManagers", (string)null);
                });

            modelBuilder.Entity("Owner", b =>
                {
                    b.HasBaseType("Employee");

                    b.ToTable("Owners", (string)null);
                });

            modelBuilder.Entity("SalesManager", b =>
                {
                    b.HasBaseType("Employee");

                    b.ToTable("SalesManagers", (string)null);
                });

            modelBuilder.Entity("Technologist", b =>
                {
                    b.HasBaseType("Employee");

                    b.ToTable("Technologists", (string)null);
                });

            modelBuilder.Entity("TourGuide", b =>
                {
                    b.HasBaseType("Employee");

                    b.ToTable("TourGuides", (string)null);
                });

            modelBuilder.Entity("VanDriver", b =>
                {
                    b.HasBaseType("Employee");

                    b.Property<string>("SomethingForTest")
                        .HasColumnType("longtext");

                    b.ToTable("VanDrivers", (string)null);
                });

            modelBuilder.Entity("Warehouseman", b =>
                {
                    b.HasBaseType("Employee");

                    b.ToTable("Warehousemen", (string)null);
                });

            modelBuilder.Entity("Customer", b =>
                {
                    b.HasOne("City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.Navigation("City");
                });

            modelBuilder.Entity("Administrator", b =>
                {
                    b.HasOne("Employee", null)
                        .WithOne()
                        .HasForeignKey("Administrator", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Logistician", b =>
                {
                    b.HasOne("Employee", null)
                        .WithOne()
                        .HasForeignKey("Logistician", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarketingManager", b =>
                {
                    b.HasOne("Employee", null)
                        .WithOne()
                        .HasForeignKey("MarketingManager", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Owner", b =>
                {
                    b.HasOne("Employee", null)
                        .WithOne()
                        .HasForeignKey("Owner", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SalesManager", b =>
                {
                    b.HasOne("Employee", null)
                        .WithOne()
                        .HasForeignKey("SalesManager", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Technologist", b =>
                {
                    b.HasOne("Employee", null)
                        .WithOne()
                        .HasForeignKey("Technologist", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TourGuide", b =>
                {
                    b.HasOne("Employee", null)
                        .WithOne()
                        .HasForeignKey("TourGuide", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VanDriver", b =>
                {
                    b.HasOne("Employee", null)
                        .WithOne()
                        .HasForeignKey("VanDriver", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Warehouseman", b =>
                {
                    b.HasOne("Employee", null)
                        .WithOne()
                        .HasForeignKey("Warehouseman", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
