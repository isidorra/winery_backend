// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace winery_backend.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240502110941_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Cities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Belgrade",
                            Zip = "11000"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Novi Sad",
                            Zip = "21000"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Niš",
                            Zip = "18000"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Kragujevac",
                            Zip = "34000"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Subotica",
                            Zip = "24000"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Zrenjanin",
                            Zip = "23000"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Pančevo",
                            Zip = "26000"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Čačak",
                            Zip = "32000"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Kraljevo",
                            Zip = "36000"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Smederevo",
                            Zip = "11300"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Leskovac",
                            Zip = "16000"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Valjevo",
                            Zip = "14000"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Užice",
                            Zip = "31000"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Šabac",
                            Zip = "15000"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Novi Pazar",
                            Zip = "36300"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Negotin",
                            Zip = "19300"
                        });
                });

            modelBuilder.Entity("Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Door")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Firstname")
                        .HasColumnType("longtext");

                    b.Property<string>("Floor")
                        .HasColumnType("longtext");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Lastname")
                        .HasColumnType("longtext");

                    b.Property<string>("Number")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<int?>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Customers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1990, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityId = 1,
                            Email = "john.doe@example.com",
                            Firstname = "John",
                            Gender = 1,
                            Lastname = "Doe",
                            Number = "101",
                            Password = "hashedpassword",
                            PhoneNumber = "1234567890",
                            Role = 9,
                            Street = "123 Main St",
                            Username = "johndoe"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(1992, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityId = 2,
                            Door = "3",
                            Email = "jane.doe@example.com",
                            Firstname = "Jane",
                            Floor = "2",
                            Gender = 0,
                            Lastname = "Doe",
                            Number = "202",
                            Password = "hashedpassword",
                            PhoneNumber = "9876543210",
                            Role = 9,
                            Street = "456 Elm St",
                            Username = "janedoe"
                        });
                });

            modelBuilder.Entity("Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Firstname")
                        .HasColumnType("longtext");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Lastname")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("ProfilePhoto")
                        .HasColumnType("longtext");

                    b.Property<int?>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Employees", (string)null);

                    b.UseTptMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1990, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "pera.peric@example.com",
                            Firstname = "Pera",
                            Gender = 1,
                            Lastname = "Peric",
                            Password = "hashedpassword",
                            PhoneNumber = "1234567890",
                            ProfilePhoto = "somepath",
                            Role = 7,
                            Username = "peraperic"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(1992, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "imenko@example.com",
                            Firstname = "Imenko",
                            Gender = 1,
                            Lastname = "Prezimenic",
                            Password = "hashedpassword",
                            PhoneNumber = "9876543210",
                            ProfilePhoto = "somepath",
                            Role = 0,
                            Username = "imenko"
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(1982, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@admin.com",
                            Firstname = "Admin",
                            Gender = 1,
                            Lastname = "Adminovic",
                            Password = "$2a$10$dVNZNTm8Ts9fGjM3M8QuE.LF0ZutYn1utYoeSdfZZXbB0ec9MjBUS",
                            PhoneNumber = "061111111",
                            ProfilePhoto = "somepath",
                            Role = 0,
                            Username = "admin123"
                        });
                });

            modelBuilder.Entity("Administrator", b =>
                {
                    b.HasBaseType("Employee");

                    b.ToTable("Administrators", (string)null);
                });

            modelBuilder.Entity("Logistician", b =>
                {
                    b.HasBaseType("Employee");

                    b.ToTable("Logisticians", (string)null);
                });

            modelBuilder.Entity("MarketingManager", b =>
                {
                    b.HasBaseType("Employee");

                    b.ToTable("MarketingManagers", (string)null);
                });

            modelBuilder.Entity("Owner", b =>
                {
                    b.HasBaseType("Employee");

                    b.ToTable("Owners", (string)null);
                });

            modelBuilder.Entity("SalesManager", b =>
                {
                    b.HasBaseType("Employee");

                    b.ToTable("SalesManagers", (string)null);
                });

            modelBuilder.Entity("Technologist", b =>
                {
                    b.HasBaseType("Employee");

                    b.ToTable("Technologists", (string)null);
                });

            modelBuilder.Entity("TourGuide", b =>
                {
                    b.HasBaseType("Employee");

                    b.ToTable("TourGuides", (string)null);
                });

            modelBuilder.Entity("VanDriver", b =>
                {
                    b.HasBaseType("Employee");

                    b.Property<string>("SomethingForTest")
                        .HasColumnType("longtext");

                    b.ToTable("VanDrivers", (string)null);
                });

            modelBuilder.Entity("Warehouseman", b =>
                {
                    b.HasBaseType("Employee");

                    b.ToTable("Warehousemen", (string)null);
                });

            modelBuilder.Entity("Customer", b =>
                {
                    b.HasOne("City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.Navigation("City");
                });

            modelBuilder.Entity("Administrator", b =>
                {
                    b.HasOne("Employee", null)
                        .WithOne()
                        .HasForeignKey("Administrator", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Logistician", b =>
                {
                    b.HasOne("Employee", null)
                        .WithOne()
                        .HasForeignKey("Logistician", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarketingManager", b =>
                {
                    b.HasOne("Employee", null)
                        .WithOne()
                        .HasForeignKey("MarketingManager", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Owner", b =>
                {
                    b.HasOne("Employee", null)
                        .WithOne()
                        .HasForeignKey("Owner", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SalesManager", b =>
                {
                    b.HasOne("Employee", null)
                        .WithOne()
                        .HasForeignKey("SalesManager", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Technologist", b =>
                {
                    b.HasOne("Employee", null)
                        .WithOne()
                        .HasForeignKey("Technologist", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TourGuide", b =>
                {
                    b.HasOne("Employee", null)
                        .WithOne()
                        .HasForeignKey("TourGuide", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VanDriver", b =>
                {
                    b.HasOne("Employee", null)
                        .WithOne()
                        .HasForeignKey("VanDriver", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Warehouseman", b =>
                {
                    b.HasOne("Employee", null)
                        .WithOne()
                        .HasForeignKey("Warehouseman", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
